<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>WildFly 14 is released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WXlG3HsXQcg/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_wildfly" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Jason Greene</name></author><id>searchisko:content:id:jbossorg_blog-wildfly_14_is_released</id><updated>2018-08-30T22:58:57Z</updated><published>2018-08-30T21:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;WildFly 14 Final is now available &lt;a href="http://wildfly.org/downloads"&gt;for download&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_ee8_certified"&gt;EE8 Certified!!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I am happy to announce that the WildFly 14 release is Java EE8 Certified! Since WildFly is now certified, the default EE7 mode and EE8 preview option have been dropped. The server now only provides EE8 APIs in all run modes. Since Java EE8 is backwards compatible with EE7, applications developed against EE7 (and earlier) will still run on WildFly 14.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is our third release following our &lt;a href="http://lists.jboss.org/pipermail/wildfly-dev/2017-December/006250.html"&gt;new quarterly delivery model&lt;/a&gt;. A major theme of this plan, was to deliver EE8 functionality in fully completed incremental chunks, as opposed to waiting for everything to finish in a big bang release. This goal has now been completed, and we greatly appreciate the feedback and support from the community during this process. We plan to continue this model going forward.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;An overview of the new and updated standards in Java EE8 are as follows:&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all spread"&gt; &lt;colgroup&gt; &lt;col style="width: 20%;" /&gt; &lt;col style="width: 20%;" /&gt; &lt;col style="width: 20%;" /&gt; &lt;col style="width: 20%;" /&gt; &lt;col style="width: 20%;" /&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Name&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;From Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;From JSR&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;To Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;To JSR&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java Servlet&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;3.1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-340&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;4.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=370"&gt;JSR-369&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Contexts and Dependency Injection for Java&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-346&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=365"&gt;JSR-365&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Bean Validation&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-349&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=380"&gt;JSR-380&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JavaServer Faces&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-344&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.3&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=372"&gt;JSR-372&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JavaMail&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.5&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-919&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.6&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=919"&gt;JSR-919&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for RESTFul Web Services&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-339&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=370"&gt;JSR-370&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for JSON Processing&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-353&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=374"&gt;JSR-374&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java API for JSON Binding&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=367"&gt;JSR-367&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Common Annotations for the Java Platform&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-250&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.3&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="http://download.oracle.com/otndocs/jcp/common_annotations-1_3-mrel3-spec/"&gt;JSR-250&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java EE Security&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;-&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;1.0&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=375"&gt;JSR-375&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Java Persistence&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.1&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;JSR-338&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2.2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;&lt;a href="https://jcp.org/en/jsr/detail?id=338"&gt;JSR-338&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_microprofile_capabilities"&gt;MicroProfile Capabilities&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Another major improvement in WildFly 14 is the inclusion of a number of important MicroProfile standards that are useful for running in container environments.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;These include:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;MP Config&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MP OpenTracing&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MP Health&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_high_performance_connection_pool"&gt;High Performance Connection Pool&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Also new in WildFly 14, is a new high performance direct connection pool backed by the Agroal project. Since this is a new pooling implementation, it must be explicitly enabled to take advantage of it. By default, the existing JCA based implementation (IronJacamar) is still used; however, in a future release, Agroal may become the new default. For more information, please see the WildFly 14 documentation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_mod_cluster_multiplicity"&gt;Mod-Cluster Multiplicity&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Mod cluster support within WildFly previously only supported a single web server listener and server configuration on a WildFly instance. Mod-cluster has now been enhanced to support multiple web server configurations by adding the ability to declare and reference multiple mod-cluster configurations within its subsystem.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_jira_release_notes"&gt;Jira Release Notes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The full list of issues resolved is available &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12338892"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WXlG3HsXQcg" height="1" width="1" alt=""/&gt;</content><summary>WildFly 14 Final is now available for download! EE8 Certified!! I am happy to announce that the WildFly 14 release is Java EE8 Certified! Since WildFly is now certified, the default EE7 mode and EE8 preview option have been dropped. The server now only provides EE8 APIs in all run modes. Since Java EE8 is backwards compatible with EE7, applications developed against EE7 (and earlier) will still ru...</summary><dc:creator>Jason Greene</dc:creator><dc:date>2018-08-30T21:00:00Z</dc:date><feedburner:origLink>http://wildfly.org/news/2018/08/30/WildFly14-Final-Released/</feedburner:origLink></entry><entry><title>Asynchronous communication between microservices using AMQP and Vert.x</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Tc1xtmvcrbo/" /><category term="ampq" scheme="searchisko:content:tags" /><category term="Apache QPid" scheme="searchisko:content:tags" /><category term="asynchronous" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat AMQ Interconnect" scheme="searchisko:content:tags" /><category term="request-reply pattern" scheme="searchisko:content:tags" /><category term="vert.x" scheme="searchisko:content:tags" /><author><name>Faisal Masood</name></author><id>searchisko:content:id:jbossorg_blog-asynchronous_communication_between_microservices_using_amqp_and_vert_x</id><updated>2018-08-30T20:25:17Z</updated><published>2018-08-30T20:25:17Z</published><content type="html">&lt;p&gt;Microservices are the go-to architecture in most new, modern software solutions. They are (mostly) designed to do one thing, and they must talk to each other to accomplish a business use-case. All communication between the microservices is via network calls; this pattern avoids tight coupling between services and provides better separation between them.&lt;/p&gt; &lt;p&gt;There are basically two styles of communication: synchronous and asynchronous. These two styles applied properly are the foundation for request-reply and event-driven patterns. In the case of the request-reply pattern, a client initiates a request and typically waits synchronously for the reply. However, there are cases where the client could decide not to wait and register a callback with the other party, which is an example of the request-reply pattern in an asynchronous fashion.&lt;/p&gt; &lt;p&gt;In this article, I am showcasing the approach of asynchronous request-reply by having two services communicate with each other over Advanced Message Queuing Protocol (&lt;a href="https://www.amqp.org/about/what"&gt;AMQP&lt;/a&gt;). AMQP is an open standard for passing business messages between applications or organizations. Although this article focuses on the request-reply pattern, the same code can be used to develop additional scenarios like &lt;a href="https://thenewstack.io/microservices-its-all-about-the-events/"&gt;event storming&lt;/a&gt;. Communicating using an asynchronous model can be very beneficial for implementing the &lt;a href="http://blog.arungupta.me/microservice-design-patterns/"&gt;aggregator pattern&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I will be using &lt;a href="https://qpid.apache.org"&gt;Apache QPid Proton&lt;/a&gt; (or &lt;a href="https://developers.redhat.com/products/amq/overview/"&gt;Red Hat AMQ Interconnect&lt;/a&gt;) as the message router and the &lt;a href="https://vertx.io/docs/vertx-amqp-bridge/java/"&gt;Vert.x AMQP bridge&lt;/a&gt; for communication between the two services.&lt;/p&gt; &lt;p&gt;&lt;span id="more-516007"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Solution components&lt;/h2&gt; &lt;p&gt;This demo has three components:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;em&gt;frontend&lt;/em&gt;: This is a service written in Java and provides an HTTP endpoint to receive calls from clients. Upon receiving a request, the &lt;em&gt;frontend&lt;/em&gt; service sends the call to the QPid router and registers a reply handler. The reply handler will be invoked by the Vert.x AMQP bridge when the response is available. The &lt;code&gt;frontend&lt;/code&gt; folder in the codebase hosts this project.&lt;/li&gt; &lt;li&gt;QPid router: The &lt;em&gt;frontend&lt;/em&gt; process takes the call and posts a message to the QPid queue. Vert.x automatically takes care of adding a &lt;code&gt;correlationId&lt;/code&gt; as the message property to identify a response to the original request.&lt;/li&gt; &lt;li&gt;&lt;em&gt;backend: &lt;/em&gt;The &lt;em&gt;backend&lt;/em&gt; component listens for the message in the call from the QPid router, process it (e.g. doing a calculation or persisting in a database), and sends the response back to the QPid router. The QPid router will then notify the &lt;em&gt;frontend&lt;/em&gt; component with the response. The &lt;code&gt;backend&lt;/code&gt; folder in the codebase hosts this project.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Message flow&lt;/h2&gt; &lt;p&gt;The basic flow of the messages across different components is as follows. The full details of this flow along with the relative headers can be found &lt;a href="https://vertx.io/docs/vertx-amqp-bridge/java/"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The &lt;em&gt;frontend&lt;/em&gt; service will send a message to a QPid server and provides a reply handler. Vert.x automatically populates the required headers needed for request-reply communication.&lt;/li&gt; &lt;li&gt;The receiving application, the &lt;em&gt;backend&lt;/em&gt; service, consumes the message and sends a reply back to the QPid server. Vert.x populates the required headers needed for request-reply communication.&lt;/li&gt; &lt;li&gt;The QPid server dispatches the reply message to the &lt;em&gt;frontend&lt;/em&gt; service&amp;#8217;s reply handler. Vert.x bridge handles the invocation of the reply handler automatically.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Clone this &lt;a href="https://github.com/masoodfaisal/service-comms-amqp-vertx"&gt;GitHub repo&lt;/a&gt; to get the example code.&lt;/p&gt; &lt;h2&gt;How to run the example: Quickstart&lt;/h2&gt; &lt;p&gt;You can use the Docker Compose file to run all three components of this example, by issuing the following command:&lt;/p&gt; &lt;pre&gt;docker-compose up&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;How to run the example: The hard way&lt;/h2&gt; &lt;p&gt;This section summarizes how to run each component individually. You need the following software to run them on your laptop.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://www.docker.com/get-started"&gt;Docker&lt;/a&gt; (for executing the Apache Qpid router)&lt;/li&gt; &lt;li&gt;&lt;a href="http://openjdk.java.net/install/"&gt;Open JDK 8&lt;/a&gt; (to compile the &lt;em&gt;frontend&lt;/em&gt; and the &lt;em&gt;backend&lt;/em&gt; service components)&lt;/li&gt; &lt;li&gt;&lt;a href="https://maven.apache.org/download.cgi"&gt;Maven 3.2&lt;/a&gt; (both services use Maven)&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/tsenart/vegeta"&gt;Vegeta&lt;/a&gt; as an HTPP client (or you can use your favorite tool for this)&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Execution&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Use the following command to start the local QPid router:&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;docker run -it -p 5672:5672 ceposta/qdr&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Compile and execute the &lt;em&gt;frontend&lt;/em&gt; service:&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;cd frontend mvn clean install java -jar target/frontend-service-full.jar&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Compile and execute the &lt;em&gt;backend&lt;/em&gt; service:&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;cd backend mvn clean install java -jar target/backend-service-full.jar&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Testing&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/tsenart/vegeta"&gt;Vegeta&lt;/a&gt;, an open source tool for HTTP load testing, can be used to post requests to the &lt;em&gt;frontend&lt;/em&gt; component.&lt;/p&gt; &lt;pre&gt;echo "GET http://localhost:8080/" | ./vegeta attack -duration=60s -rate=50 | tee results.bin | ./vegeta report&lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Verifying the number of messages and latency&lt;/h2&gt; &lt;p&gt;QPid provides an ultra-fast backbone as an asynchronous hub for communication between services. Once you finish testing your application, you can log into the QPid router&amp;#8217;s Docker container using its &lt;code&gt;IMAGE ID&lt;/code&gt; and run &lt;code&gt;qdstat&lt;/code&gt; to see various &lt;a href="https://qpid.apache.org/releases/qpid-dispatch-0.6.0/man/qdstat.html"&gt;metrics&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;docker exec &amp;#60;container-name&amp;#62; qdstat -c docker exec &amp;#60;container-name&amp;#62; qdstat -l docker exec &amp;#60;container-name&amp;#62; qdstat -a &lt;/pre&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;&lt;a href="https://qpid.apache.org"&gt;Apache QPid&lt;/a&gt; provides an ultra-fast backbone for communication between microservices. Since AMQP is a wire-level protocol, services written in other stacks (like .NET) can also use the same communication channel. Java developers can easily adapt to the AMQP-based asynchronous inter-services communication pattern using the &lt;a href="https://vertx.io/docs/vertx-amqp-bridge/java/"&gt;Vert.x AMQP bridge&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;linkname=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F30%2Fmicroservices-async-communications-amqp-vertx%2F&amp;#38;title=Asynchronous%20communication%20between%20microservices%20using%20AMQP%20and%20Vert.x" data-a2a-url="https://developers.redhat.com/blog/2018/08/30/microservices-async-communications-amqp-vertx/" data-a2a-title="Asynchronous communication between microservices using AMQP and Vert.x"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/30/microservices-async-communications-amqp-vertx/"&gt;Asynchronous communication between microservices using AMQP and Vert.x&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Tc1xtmvcrbo" height="1" width="1" alt=""/&gt;</content><summary>Microservices are the go-to architecture in most new, modern software solutions. They are (mostly) designed to do one thing, and they must talk to each other to accomplish a business use-case. All communication between the microservices is via network calls; this pattern avoids tight coupling between services and provides better separation between them. There are basically two styles of communicat...</summary><dc:creator>Faisal Masood</dc:creator><dc:date>2018-08-30T20:25:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/30/microservices-async-communications-amqp-vertx/</feedburner:origLink></entry><entry><title>Infinispan 9.3.2.Final and 9.4.0.CR2 are out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/84r34tO47pg/infinispan-932final-and-940cr2-are-out.html" /><category term="9.3" scheme="searchisko:content:tags" /><category term="9.4" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="final" scheme="searchisko:content:tags" /><category term="minor release" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="release candidate" scheme="searchisko:content:tags" /><author><name>Katia Aresti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_3_2_final_and_9_4_0_cr2_are_out</id><updated>2018-08-30T14:46:09Z</updated><published>2018-08-30T14:46:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Dear Infinispan users,&lt;br /&gt;&lt;br /&gt;We have just released &lt;b&gt;9.3.2.Final&lt;/b&gt;&amp;nbsp;and &lt;b&gt;9.4.0.CR2&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;9.3.2.Final&lt;/b&gt; includes bug fixes and improvements.&lt;br /&gt;&lt;br /&gt;Highlights of this release include:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Upgrade to protostream 4.2.1.Final (&lt;a href="https://issues.jboss.org/browse/ISPN-9399"&gt;ISPN-9399&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Ship basic analyzers by default (&lt;a href="https://issues.jboss.org/browse/ISPN-9429"&gt;ISPN-9429&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Avoid unneeded parentheses in Ickle query string generated by QueryBuilder (&lt;a href="https://issues.jboss.org/browse/ISPN-9378"&gt;ISPN-9378&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;The full list of 9.3.2.Final fixes are &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12338661"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;9.4.0.CR2&lt;/b&gt; has been released due to an internal issue we experienced releasing CR1.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;You can find both releases on our &lt;a href="http://infinispan.org/download/"&gt;download page&lt;/a&gt;. Please report any issues in our &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;br /&gt;Enjoy,&lt;br /&gt;&lt;br /&gt;The Infinispan Team &lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/CsJ1pZmbSWY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/84r34tO47pg" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan users, We have just released 9.3.2.Final and 9.4.0.CR2. 9.3.2.Final includes bug fixes and improvements. Highlights of this release include: Upgrade to protostream 4.2.1.Final (ISPN-9399)  Ship basic analyzers by default (ISPN-9429)  Avoid unneeded parentheses in Ickle query string generated by QueryBuilder (ISPN-9378) The full list of 9.3.2.Final fixes are here. 9.4.0.CR2 has been...</summary><dc:creator>Katia Aresti</dc:creator><dc:date>2018-08-30T14:46:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/CsJ1pZmbSWY/infinispan-932final-and-940cr2-are-out.html</feedburner:origLink></entry><entry><title>Intro to Podman (Red Hat Enterprise Linux 7.6 Beta)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/w-UmInNhIBU/" /><category term="beta" scheme="searchisko:content:tags" /><category term="buildah" scheme="searchisko:content:tags" /><category term="cli" scheme="searchisko:content:tags" /><category term="container" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Podman" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="skopeo" scheme="searchisko:content:tags" /><author><name>Alessandro Arrichiello</name></author><id>searchisko:content:id:jbossorg_blog-intro_to_podman_red_hat_enterprise_linux_7_6_beta</id><updated>2018-08-29T11:00:15Z</updated><published>2018-08-29T11:00:15Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/blog/red-hat-enterprise-linux-76-beta-now-available"&gt;Red Hat Enterprise Linux (RHEL) 7.6 Beta&lt;/a&gt; was released a few days ago and one of the first new features I noticed is Podman. Podman complements &lt;a href="https://www.projectatomic.io/blog/2017/06/introducing-buildah/"&gt;Buildah&lt;/a&gt; and &lt;a href="https://www.projectatomic.io/blog/2016/07/working-with-containers-image-made-easy/"&gt;Skopeo&lt;/a&gt; by offering an experience similar to the Docker command line: allowing users to run standalone (non-orchestrated) containers. And Podman doesn’t require a daemon to run containers and pods, so we can easily say goodbye to big fat daemons.&lt;/p&gt; &lt;p&gt;Podman implements almost all the Docker CLI commands (apart from the ones related to Docker Swarm, of course). For container orchestration, I suggest you take a look at Kubernetes and &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Podman consists of just a single command to run on the command line. There are no daemons in the background doing stuff, and this means that Podman can be integrated into system services through &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll cover some real examples that show how easy it can be to transition from the Docker CLI to Podman.&lt;/p&gt; &lt;p&gt;&lt;span id="more-515697"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Podman installation&lt;/h2&gt; &lt;p&gt;If you are running Red Hat Enterprise Linux 7.6 Beta, follow the steps below.  If not, you can &lt;a href="http://katacoda.com/courses/containers-without-docker/running-containers-with-podman"&gt;try Podman online with Katacoda&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You need to enable the &lt;code&gt;extras&lt;/code&gt; repo:&lt;/p&gt; &lt;pre&gt;$ su - # subscription-manager repos --enable rhel-7-server-extras-beta-rpms&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; at the time this was written RHEL 7.6 is still in beta. Once GA occurs, please change the repository name by removing the &lt;code&gt;-beta-&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Then, launch the proper installation command:&lt;/p&gt; &lt;pre&gt;# yum -y install podman&lt;/pre&gt; &lt;p&gt;This command will install Podman and also its dependencies: &lt;code&gt;atomic-registries&lt;/code&gt;, &lt;code&gt;runC&lt;/code&gt;, &lt;code&gt;skopeo-containers&lt;/code&gt;, and SELinux policies.&lt;/p&gt; &lt;p&gt;That&amp;#8217;s all. Now you can now play with Podman.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Command-line examples&lt;/h2&gt; &lt;h3&gt;Run a RHEL container&lt;/h3&gt; &lt;p&gt;For the first example, suppose we want to just  run a RHEL container. We are on a RHEL system and we want to run a RHEL container, so it should work:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# docker run -it rhel sh -bash: docker: command not found&lt;/pre&gt; &lt;p&gt;As you can see, there is no &lt;code&gt;docker&lt;/code&gt; command on my RHEL 7.6 host. Just replace the &lt;code&gt;docker&lt;/code&gt; command with &lt;code&gt;podman&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# podman run -it rhel sh Trying to pull registry.access.redhat.com/rhel:latest...Getting image source signatures Copying blob sha256:367d845540573038025f445c654675aa63905ec8682938fb45bc00f40849c37b 71.46 MB / ? [------------=----------------------------------------------] 23s Copying blob sha256:b82a357e4f15fda58e9728fced8558704e3a2e1d100e93ac408edb45fe3a5cb9 1.27 KB / ? [----=--------------------------------------------------------] 0s Copying config sha256:f5ea21241da8d3bc1e92d08ca4888c2f91ed65280c66acdefbb6d2dba6cd0b29 6.52 KB / 6.52 KB [========================================================] 0s Writing manifest to image destination Storing signatures sh-4.2#&lt;/pre&gt; &lt;p&gt;We now have our RHEL container. Let&amp;#8217;s play with it, check its status, and then delete it and its source image:&lt;/p&gt; &lt;pre&gt;sh-4.2# ps ax PID TTY STAT TIME COMMAND 1 pts/0 Ss 0:00 sh 10 pts/0 R+ 0:00 ps ax sh-4.2# exit [root@localhost ~]# podman ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES deda2991f9fd registry.access.redhat.com/rhel:latest sh 3 minutes ago Exited (0) Less than a second ago reverent_torvalds [root@localhost ~]# podman rm deda2991f9fd deda2991f9fd43400566abceaa917ecbd59a2e83354c5c9021ba1830a7ab196d [root@localhost ~]# podman image rm rhel f5ea21241da8d3bc1e92d08ca4888c2f91ed65280c66acdefbb6d2dba6cd0b29&lt;/pre&gt; &lt;p&gt;As you can see, we used the same syntax as we&amp;#8217;d use with &lt;code&gt;docker&lt;/code&gt;. There are no differences at the moment. I didn&amp;#8217;t check the Podman documentation and I started working immediately!&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Run a MariaDB persistent container&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s move forward and try a more complicated test: run MariaDB 10.2 with some custom variables and try to let its &amp;#8220;data&amp;#8221; be persistent.&lt;/p&gt; &lt;p&gt;First, let&amp;#8217;s download the MariaDB container image and inspect its details:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# podman pull registry.access.redhat.com/rhscl/mariadb-102-rhel7Trying to pull registry.access.redhat.com/rhscl/mariadb-102-rhel7...Getting image source signatures Copying blob sha256:367d845540573038025f445c654675aa63905ec8682938fb45bc00f40849c37b 71.46 MB / ? [------------=----------------------------------------------] 10s Copying blob sha256:b82a357e4f15fda58e9728fced8558704e3a2e1d100e93ac408edb45fe3a5cb9 1.27 KB / ? [----=--------------------------------------------------------] 0s Copying blob sha256:ddec0f65683ad89fc27298921921b2f8cbf57f674ed9eb71eef4e23a9dd9bbfe 6.40 MB / ? [--------------=----------------------------------------------] 1s Copying blob sha256:105cfda934d478ffbf65d74a89af55cc5de1d5bc94874c2d163c45e31a937047 58.25 MB / ? [-------------------------------------------=---------------] 10s Copying config sha256:7ac0a23445fec91d4b458f3062e64d1ca4af4755387604f8d8cbec08926867d7 6.79 KB / 6.79 KB [========================================================] 0s Writing manifest to image destination Storing signatures 7ac0a23445fec91d4b458f3062e64d1ca4af4755387604f8d8cbec08926867d7 [root@localhost ~]# podman images REPOSITORY TAG IMAGE ID CREATED SIZE registry.access.redhat.com/rhscl/mariadb-102-rhel7 latest 7ac0a23445fe 9 days ago 445MB [root@localhost ~]# podman inspect 7ac0a23445fe ...&lt;/pre&gt; &lt;p&gt;Then we can set up a folder that will handle MariaDB&amp;#8217;s data once we start our container:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# mkdir mysql-data [root@localhost ~]# chown 27:27 mysql-data&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; &amp;#8220;27&amp;#8221; is the ID of the &lt;code&gt;mysql&lt;/code&gt; user that will run the MariaDB&amp;#8217;s processes in the container. For this reason, we have to allow it to read from and write to the directory.&lt;/p&gt; &lt;p&gt;And finally, run it:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# podman run -d -v /root/mysql-data:/var/lib/mysql/data:Z -e MYSQL_USER=user -e MYSQL_PASSWORD=pass -e MYSQL_DATABASE=db -p 3306:3306 registry.access.redhat.com/rhscl/mariadb-102-rhel7 71da2bb210b36aaab28a2dc81b8e77da4e1024d1f2d025c0a7b97b075dec1425 [root@localhost ~]# podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 71da2bb210b3 registry.access.redhat.com/rhscl/mariadb-102-rhel7:latest container-entrypoin... 3 seconds ago Up 3 seconds ago 0.0.0.0:3306-&amp;#62;3306/udp, 0.0.0.0:3306-&amp;#62;3306/tcp cranky_mahavira&lt;/pre&gt; &lt;p&gt;As you can see, the container is up and running, but what is it doing? Let&amp;#8217;s check:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# podman logs 71da2bb210b3 | head =&amp;#62; sourcing 20-validate-variables.sh ... =&amp;#62; sourcing 25-validate-replication-variables.sh ... =&amp;#62; sourcing 30-base-config.sh ... ---&amp;#62; 13:12:43 Processing basic MySQL configuration files ... =&amp;#62; sourcing 60-replication-config.sh ... =&amp;#62; sourcing 70-s2i-config.sh ... ---&amp;#62; 13:12:43 Processing additional arbitrary MySQL configuration provided by s2i ... =&amp;#62; sourcing 40-paas.cnf ... =&amp;#62; sourcing 50-my-tuning.cnf ... ---&amp;#62; 13:12:43 Initializing database ...&lt;/pre&gt; &lt;p&gt;Ah! It&amp;#8217;s just started and initialized its database. Let&amp;#8217;s play with it:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# mysql --user=user --password=pass -h 127.0.0.1 -P 3306 -t Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 8 Server version: 10.2.8-MariaDB MariaDB Server Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;#62; show databases; +--------------------+ | Database | +--------------------+ | db | | information_schema | | test | +--------------------+ 3 rows in set (0.00 sec) MariaDB [(none)]&amp;#62; use test; Database changed MariaDB [test]&amp;#62; show tables; Empty set (0.00 sec)&lt;/pre&gt; &lt;p&gt;Perfect. Now we&amp;#8217;ll create at least a table and then we&amp;#8217;ll terminate the container:&lt;/p&gt; &lt;pre&gt;MariaDB [db]&amp;#62; CREATE TABLE mytest (username VARCHAR(20), date DATETIME); Query OK, 0 rows affected (0.02 sec) MariaDB [db]&amp;#62; show tables; +--------------+ | Tables_in_db | +--------------+ | mytest | +--------------+ 1 row in set (0.00 sec) MariaDB [db]&amp;#62; Bye [root@localhost ~]# podman kill 71da2bb210b3 71da2bb210b36aaab28a2dc81b8e77da4e1024d1f2d025c0a7b97b075dec1425&lt;/pre&gt; &lt;p&gt;Inspecting the content of the folder, we can see that data is still there, but let&amp;#8217;s start a new container for checking the data persistence:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# ls -la mysql-data/ total 41024 drwxr-xr-x. 6 27 27 4096 Aug 24 09:12 . dr-xr-x---. 4 root root 219 Aug 24 09:28 .. -rw-rw----. 1 27 27 2 Aug 24 09:12 71da2bb210b3.pid -rw-rw----. 1 27 27 16384 Aug 24 09:12 aria_log.00000001 -rw-rw----. 1 27 27 52 Aug 24 09:12 aria_log_control drwx------. 2 27 27 56 Aug 24 09:27 db -rw-rw----. 1 27 27 2799 Aug 24 09:12 ib_buffer_pool -rw-rw----. 1 27 27 12582912 Aug 24 09:27 ibdata1 -rw-rw----. 1 27 27 8388608 Aug 24 09:27 ib_logfile0 -rw-rw----. 1 27 27 8388608 Aug 24 09:12 ib_logfile1 -rw-rw----. 1 27 27 12582912 Aug 24 09:12 ibtmp1 -rw-rw----. 1 27 27 0 Aug 24 09:12 multi-master.info drwx------. 2 27 27 4096 Aug 24 09:12 mysql -rw-r--r--. 1 27 27 14 Aug 24 09:12 mysql_upgrade_info drwx------. 2 27 27 20 Aug 24 09:12 performance_schema -rw-rw----. 1 27 27 24576 Aug 24 09:12 tc.log drwx------. 2 27 27 6 Aug 24 09:12 test [root@localhost ~]# podman run -d -v /root/mysql-data:/var/lib/mysql/data:Z -e MYSQL_USER=user -e MYSQL_PASSWORD=pass -e MYSQL_DATABASE=db -p 3306:3306 registry.access.redhat.com/rhscl/mariadb-102-rhel7 0364513f6b6ae1b86ea3752ec732bad757770ca14ec1f879e7487f3f4293004d [root@localhost ~]# podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0364513f6b6a registry.access.redhat.com/rhscl/mariadb-102-rhel7:latest container-entrypoin... 3 seconds ago Up 2 seconds ago 0.0.0.0:3306-&amp;#62;3306/udp, 0.0.0.0:3306-&amp;#62;3306/tcp heuristic_northcutt [root@localhost ~]# mysql --user=user --password=pass -h 127.0.0.1 -P 3306 -t Welcome to the MariaDB monitor. Commands end with ; or \g. Your MariaDB connection id is 8 Server version: 10.2.8-MariaDB MariaDB Server Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. MariaDB [(none)]&amp;#62; use db; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [db]&amp;#62; show tables; +--------------+ | Tables_in_db | +--------------+ | mytest | +--------------+ 1 row in set (0.00 sec) MariaDB [db]&amp;#62; Bye [root@localhost ~]# podman kill 0364513f6b6a 0364513f6b6ae1b86ea3752ec732bad757770ca14ec1f879e7487f3f4293004d&lt;/pre&gt; &lt;p&gt;Great! MariaDB&amp;#8217;s data is still there and the new container read it and showed it once as requested.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;Manage containers as system services through systemd and Podman&lt;/h3&gt; &lt;p&gt;Finally, we&amp;#8217;ll create a simple &lt;code&gt;systemd&lt;/code&gt; resource for handling the previously created MariaDB container.&lt;/p&gt; &lt;p&gt;First, we need to create a &lt;code&gt;systemd&lt;/code&gt; resource file for handling the brand new container service:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# cat /etc/systemd/system/mariadb-podman.service [Unit] Description=Podman Test Service After=network.target [Service] Type=simple TimeoutStartSec=5m ExecStartPre=-/usr/bin/podman rm "podmantest" ExecStart=/usr/bin/podman run --name podmantest fedora doesnotexist 120 ExecReload=-/usr/bin/podman stop "podmantest" ExecReload=-/usr/bin/podman rm "podmantest" ExecStop=-/usr/bin/podman stop "podmantest" Restart=always RestartSec=30 [Install]&lt;/pre&gt; &lt;p&gt;Then we can reload the &lt;code&gt;systemd&lt;/code&gt; catalog and start the service:&lt;/p&gt; &lt;pre&gt;[root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl start mariadb-podman [root@localhost ~]# systemctl status mariadb-podman mariadb-podman.service - Custom MariaDB Podman Container Loaded: loaded (/etc/systemd/system/mariadb-podman.service; static; vendor preset: disabled) Active: active (running) since Fri 2018-08-24 10:14:36 EDT; 3s ago Process: 19147 ExecStartPre=/usr/bin/podman rm mariadbpodman (code=exited, status=0/SUCCESS) Main PID: 19172 (podman) CGroup: /system.slice/mariadb-podman.service └─19172 /usr/bin/podman run --name mariadbpodman -v /root/mysql-data:/var/lib/mysql/data:Z -e MYSQL_USER=user -e MYSQL_PASSWORD=pass -e MYSQL_DA... Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140578968823552 [Note] InnoDB: Buffer pool(s) load completed at 180824 14:14:39 Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Note] Plugin 'FEEDBACK' is disabled. Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Note] Server socket created on IP: '::'. Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Warning] 'user' entry 'root@71da2bb210b3' ignored in --sk...ve mode. Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Warning] 'user' entry '@71da2bb210b3' ignored in --skip-n...ve mode. Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Warning] 'proxies_priv' entry '@% root@71da2bb210b3' igno...ve mode. Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Note] Reading of all Master_info entries succeded Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Note] Added new Master_info '' to hash table Aug 24 10:14:39 localhost.localdomain podman[19172]: 2018-08-24 14:14:39 140579889719488 [Note] /opt/rh/rh-mariadb102/root/usr/libexec/mysqld: read...ections. Aug 24 10:14:39 localhost.localdomain podman[19172]: Version: '10.2.8-MariaDB' socket: '/var/lib/mysql/mysql.sock' port: 3306 MariaDB Server Hint: Some lines were ellipsized, use -l to show in full. [root@localhost ~]# systemctl stop mariadb-podman [root@localhost ~]#&lt;/pre&gt; &lt;p&gt;Awesome! We just set up a custom system service based on a container managed through Podman.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Further resources&lt;/h2&gt; &lt;p&gt;Do you want an easy and fast way to experiment with Podman? Katacoda is the answer. Katacoda is an interactive learning and training platform that lets you learn new technologies using real environments right in your browser!&lt;/p&gt; &lt;p&gt;Check it out here: &lt;a href="https://www.katacoda.com/courses/containers-without-docker/running-containers-with-podman"&gt;katacoda.com/courses/containers-without-docker/running-containers-with-podman&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To get a better understanding of Podman, see these two blog articles by Dan Walsh:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.projectatomic.io/blog/2018/02/reintroduction-podman/"&gt;Reintroduction of Podman&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://blog.openshift.com/crictl-vs-podman/"&gt;CRICTL vs Podman&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That&amp;#8217;s all! May the containers be with you! &lt;img src="https://s.w.org/images/core/emoji/2.4/72x72/1f642.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;About Alessandro&lt;/h2&gt; &lt;p class="selectionShareable"&gt;&lt;img class="wp-image-496187 alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture.jpg" alt="" width="180" height="181" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture.jpg 957w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-150x150.jpg 150w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-300x300.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-768x770.jpg 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-32x32.jpg 32w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-50x50.jpg 50w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-64x64.jpg 64w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-96x96.jpg 96w, https://developers.redhat.com/blog/wp-content/uploads/2018/05/profile_picture-128x128.jpg 128w" sizes="(max-width: 180px) 100vw, 180px" /&gt;Alessandro Arrichiello is a Solution Architect for Red Hat Inc. He has a passion for GNU/Linux systems, which began at age 14 and continues today. He works with tools for automating enterprise IT: configuration management and continuous integration through virtual platforms. He’s now working on a distributed cloud environment involving PaaS (OpenShift), IaaS (OpenStack) and processes management (CloudForms), container building, instance creation, HA services management, and workflow builds.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;linkname=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F29%2Fintro-to-podman%2F&amp;#38;title=Intro%20to%20Podman%20%28Red%20Hat%20Enterprise%20Linux%207.6%20Beta%29" data-a2a-url="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/" data-a2a-title="Intro to Podman (Red Hat Enterprise Linux 7.6 Beta)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/29/intro-to-podman/"&gt;Intro to Podman (Red Hat Enterprise Linux 7.6 Beta)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/w-UmInNhIBU" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Enterprise Linux (RHEL) 7.6 Beta was released a few days ago and one of the first new features I noticed is Podman. Podman complements Buildah and Skopeo by offering an experience similar to the Docker command line: allowing users to run standalone (non-orchestrated) containers. And Podman doesn’t require a daemon to run containers and pods, so we can easily say goodbye to big fat daemons....</summary><dc:creator>Alessandro Arrichiello</dc:creator><dc:date>2018-08-29T11:00:15Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/29/intro-to-podman/</feedburner:origLink></entry><entry><title>Securing apps and services with Keycloak (Watch DevNation Live video)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/D2WwWrgW6Ks/" /><category term="devnation" scheme="searchisko:content:tags" /><category term="DevNation Live" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="OpenID" scheme="searchisko:content:tags" /><category term="openid connect" scheme="searchisko:content:tags" /><category term="red hat single sign-on" scheme="searchisko:content:tags" /><category term="SAML" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Burr Sutter</name></author><id>searchisko:content:id:jbossorg_blog-securing_apps_and_services_with_keycloak_watch_devnation_live_video</id><updated>2018-08-28T11:00:06Z</updated><published>2018-08-28T11:00:06Z</published><content type="html">&lt;p&gt;The video from the last &lt;a href="https://developers.redhat.com/videos/youtube/mdZauKsMDiI/"&gt;DevNation Live: Securing apps and services with Keycloak&lt;/a&gt; is now available to watch online.  In this session, you will learn how to secure web/HTML5 applications, single-page and mobile applications, and services with Keycloak. Keycloak can be used to secure traditional monolithic applications as well as microservices and service mesh-based applications that need secure end-to-end authentication for all front- and back-end services. The examples in the video cover PHP, Node.js, and HTML/JavaScript.&lt;/p&gt; &lt;p&gt;Securing applications and services is no longer just about assigning a username and password. You need to manage identities. You need to integrate with legacy and external authentication systems to provide features that are in demand like social logins and single sign-on (SSO). Your list of other requirements may be long. But you don’t want to develop all of this yourself, nor should you.&lt;span id="more-515977"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this session, Red Hat&amp;#8217;s Stian Thorgensen, who is an engineering lead for Red Hat Single Sign-On and the community project lead on the Keycloak open source identity and access management software project, takes you through actual code and the underlying concepts.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/mdZauKsMDiI?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Agenda&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Brief&lt;/strong&gt; overview of Keycloak &lt;ul&gt; &lt;li&gt;If you need a more detailed introduction to Keycloak, watch &lt;a href="https://developers.redhat.com/videos/youtube/Bdg_DjuoX0A/"&gt;this previous DevNation Live&lt;/a&gt; video or see the resources below&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;OpenID Connect and OAuth 2.0 vs SAML v2.0 &lt;ul&gt; &lt;li&gt;When to use OIDC and when to use SAML&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Adapters for securing applications and services with Keycloak&lt;/li&gt; &lt;li&gt;Data/process flows for: &lt;ul&gt; &lt;li&gt;Securing a traditional/monolithic application&lt;/li&gt; &lt;li&gt;Securing a single-page or mobile app&lt;/li&gt; &lt;li&gt;Securing back-end services to provide end-to-end authentication of front-end and back-end services&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Examples covering: &lt;ul&gt; &lt;li&gt;HTML5/JavaScript&lt;/li&gt; &lt;li&gt;PHP&lt;/li&gt; &lt;li&gt;REST service with Node.js&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Resources and more information&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Blog post: &lt;a href="https://developers.redhat.com/blog/2018/03/19/sso-made-easy-keycloak-rhsso/"&gt;Single Sign-On Made Easy with Keycloak/Red Hat SSO&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.keycloak.org/"&gt;Keycloak website&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/keycloak/keycloak"&gt;Keycloak source code on GitHub&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://lists.jboss.org/mailman/listinfo/keycloak-user"&gt;Community mailing list&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/stianst/keycloak-demo"&gt;Demo code&lt;/a&gt; used in this session&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/videos/youtube/Bdg_DjuoX0A/"&gt;[DevNation Live Video] Secure Spring Boot Microservices with Keycloak&lt;/a&gt; &lt;ul&gt; &lt;li&gt;Blog post: &lt;a href="https://developers.redhat.com/blog/2017/05/25/easily-secure-your-spring-boot-applications-with-keycloak/"&gt;Easily Secure Your Spring Boot Applications with Keycloak&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.keycloak.org/2018/05/keycloak-on-openshift.html"&gt;Deploying and running Keycloak on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.keycloak.org/2018/06/keycloak-on-kubernetes.html"&gt;Keycloak on Kubernetes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Blog post: &lt;a href="https://developers.redhat.com/blog/2017/10/31/docker-authentication-keycloak/"&gt;Docker Authentication with Keycloak&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Blog post: &lt;a href="https://developers.redhat.com/blog/2017/10/18/openid-connect-identity-brokering-red-hat-single-sign/"&gt;OpenID Connect Identity Brokering with Red Hat Single Sign-On&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href="https://onlinexperiences.com/scripts/Server.nxp?LASCmd=AI:4;F:QS!10100&amp;#38;ShowUUID=8FC0547D-4520-4A7C-A434-4461886E3D3B"&gt;For a deeper dive into Keycloak, join us Thursday, September 20th, 2018 at 12 p.m. EDT for DevNation Live&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;linkname=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F28%2Fsecuring-apps-and-services-with-keycloak%2F&amp;#38;title=Securing%20apps%20and%20services%20with%20Keycloak%20%28Watch%20DevNation%20Live%20video%29" data-a2a-url="https://developers.redhat.com/blog/2018/08/28/securing-apps-and-services-with-keycloak/" data-a2a-title="Securing apps and services with Keycloak (Watch DevNation Live video)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/28/securing-apps-and-services-with-keycloak/"&gt;Securing apps and services with Keycloak (Watch DevNation Live video)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/D2WwWrgW6Ks" height="1" width="1" alt=""/&gt;</content><summary>The video from the last DevNation Live: Securing apps and services with Keycloak is now available to watch online.  In this session, you will learn how to secure web/HTML5 applications, single-page and mobile applications, and services with Keycloak. Keycloak can be used to secure traditional monolithic applications as well as microservices and service mesh-based applications that need secure end-...</summary><dc:creator>Burr Sutter</dc:creator><dc:date>2018-08-28T11:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/28/securing-apps-and-services-with-keycloak/</feedburner:origLink></entry><entry><title>Auto-generating news and publishing it to WordPress with Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/83OBURWkISo/" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Camel WordPress" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="wordpress" scheme="searchisko:content:tags" /><author><name>Ricardo Zanini</name></author><id>searchisko:content:id:jbossorg_blog-auto_generating_news_and_publishing_it_to_wordpress_with_apache_camel</id><updated>2018-08-27T11:00:58Z</updated><published>2018-08-27T11:00:58Z</published><content type="html">&lt;p&gt;With the release of &lt;a href="http://camel.apache.org/camel-2210-release.html"&gt;Apache Camel 2.21&lt;/a&gt;, some new components were added to the project and &lt;a href="https://github.com/apache/camel/blob/master/components/camel-wordpress/src/main/docs/wordpress-component.adoc"&gt;Camel WordPress&lt;/a&gt; was one of them. Camel is one of the upstream community projects for &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse&lt;/a&gt;. In this article, we will see how to use this new component to publish an auto-generated news post based on a &lt;a href="https://www.football-data.org/"&gt;soccer statistics API&lt;/a&gt;. The example consumes the statistics API, generates the text based on a &lt;a href="https://github.com/simplenlg/simplenlg"&gt;Natural Language Generation (NLG) library&lt;/a&gt; and then publishes it to the WordPress blog.&lt;/p&gt; &lt;p&gt;&lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt; is one of the most used open source tools for creating websites. More than 30% of the web is built on top of WordPress. Besides creating websites, blogs, and apps, WordPress leverages a huge plugin repository maintained by a passionate community. There are even plugins that can turn a WordPress website into an &lt;a href="https://woocommerce.com/"&gt;e-commerce platform&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Since &lt;a href="https://codex.wordpress.org/Version_4.7"&gt;version 4.7&lt;/a&gt;, WordPress exposes a &lt;a href="https://developer.wordpress.org/rest-api/"&gt;REST API&lt;/a&gt; capable of interacting with its resources, for example, users, categories, pages, posts, and custom types. Now it’s possible for third parties to integrate with the WordPress platform and perform almost anything with their resources.&lt;/p&gt; &lt;p&gt;Some companies implement internal websites, blogs, and project sites using WordPress. Integrating such platforms with another company’s components—such as CRM, ERP, LDAP, and Calendar Services—would add extra value to WordPress-based projects. Camel WordPress can help integrate those components easily. To get started using this new component, nothing is better than a demo.&lt;/p&gt; &lt;p&gt;&lt;span id="more-515527"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The demo&lt;/h2&gt; &lt;p&gt;For this demo, we are going to implement a scenario where Apache Camel will generate news describing results of soccer matches based on a soccer statistics API. Then that news will be published on our Soccer News Blog.&lt;/p&gt; &lt;p&gt;This demo was inspired by &lt;a href="https://www.wired.com/2017/02/robots-wrote-this-story/"&gt;news-writing bots&lt;/a&gt; that, in the future, could easily write a couple of paragraphs based on a set of rules, NLG, and AI. Of course, for this simple demonstration, we won’t create anything too fancy. We have a pre-formatted set of templates with possibles results from a soccer match prepared to receive the fixtures from the API. These templates were inspired by the &lt;a href="https://sigarra.up.pt/feup/pt/pub_geral.pub_view?pi_pub_base_id=139549"&gt;dissertation of João Aires called “Automatic Generation of Sports News,”&lt;/a&gt; published by the University of Porto (Portugal).&lt;/p&gt; &lt;p&gt;Take a look at the figure below to understand the demo architecture and the routes flow.&lt;/p&gt; &lt;p&gt;There are two REST endpoints that expose the use cases of this demo. The first one, “summary,” just converts the soccer match details into a news post. The second one, “send,” posts the generated news to our blog. Take your time figuring out the flow.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png"&gt;&lt;img class=" size-full wp-image-515537 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png" alt="" width="769" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2.png 769w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2-300x74.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/flow2-768x190.png 768w" sizes="(max-width: 769px) 100vw, 769px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Sharp readers will note that we reused some of our routes in two different use cases. Camel is a powerful framework that makes code reuse a lot easier, thanks to its input/output process design. Before starting to code your routes, take your time planning what you’re going to do and try to simplify the routes by breaking them down into smaller pieces. This way, you can achieve a better architecture and clean code.&lt;/p&gt; &lt;p&gt;The REST endpoints are pretty straightforward since we implemented the Camel REST capabilities to expose our routes. If you are not familiar with this feature, take a look at the &lt;a href="http://camel.apache.org/rest-dsl.html"&gt;Camel documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The routes&lt;/h2&gt; &lt;p&gt;Let’s dig into the Get Fixture Details and Convert to News routes.&lt;/p&gt; &lt;p&gt;The Get Fixture Details route calls a REST endpoint of the &lt;a href="https://www.football-data.org/"&gt;Football Data API&lt;/a&gt;. The API owner was very kind to offer basic usage of his API for free. &lt;a href="https://www.football-data.org/client/register"&gt;We took the free tier&lt;/a&gt; for this demo. If you are going to run this demo, I advise doing the same, since you are going to need an API key.&lt;/p&gt; &lt;p&gt;The route takes as argument the fixture ID of a match, calls the third-party API, and converts its JSON results into our internal domain model (&lt;code&gt;Statistics&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;from("direct:get-fixture-detail") .routeId("get-fixture-details") .setHeader("X-Auth-Token", constant(config.getFootballApiToken())) .toF("rest:get:%s?host=%s&amp;#38;synchronous=true", config.getFootballApiFixturePath(), config.getFootballApiHost()) .unmarshal().json(JsonLibrary.Jackson, Statistics.class);&lt;/pre&gt; &lt;p&gt;With the results of the API in place, it’s time to convert this data into text. For this task, we use the &lt;a href="https://github.com/simplenlg/simplenlg"&gt;Simple NLG library&lt;/a&gt;. This library facilitates the generation of &lt;a href="https://en.wikipedia.org/wiki/Natural_language"&gt;natural language&lt;/a&gt; in English idiom. As an example, let’s create a simple sentence like &lt;i&gt;Mary chases the monkey&lt;/i&gt;:&lt;/p&gt; &lt;pre&gt;SPhraseSpec p = nlgFactory.createClause(); p.setSubject("Mary"); p.setVerb("chase"); p.setObject("the monkey"); String output2 = realiser.realiseSentence(p); System.out.println(output2);&lt;/pre&gt; &lt;p&gt;Note that we only pass to the library the verb in the infinitive form and leave the grammatical rules to the engine. We can even turn this sentence to the past form with a simple argument:&lt;/p&gt; &lt;pre&gt;p.setFeature(Feature.TENSE, Tense.PAST);&lt;/pre&gt; &lt;p&gt;&lt;i&gt;“Mary chased the monkey” &lt;/i&gt;would then be the output.&lt;/p&gt; &lt;p&gt;This is just the tip of the iceberg; you can do much more with NLG libraries. It’s beyond the scope of this article to go deep into NLG, but if you are interested &lt;a href="https://github.com/simplenlg/simplenlg/wiki/Section-0-%E2%80%93-SimpleNLG-Tutorial"&gt;there’s a good tutorial in Github explaining how to use it&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The route responsible for converting the match data into text is called Convert to News, which is a simple &lt;code&gt;bean&lt;/code&gt; call:&lt;/p&gt; &lt;pre&gt;from("direct:convert-nlg") .routeId("convert-nlg") .bean(ContentFactory.class, "generate");&lt;/pre&gt; &lt;p&gt;The domain data to text conversion happens inside the class &lt;code&gt;ContentFactory&lt;/code&gt;. This factory is responsible for coordinating the text generation inside the &lt;code&gt;nlg&lt;/code&gt; package. The figure below illustrates the relationship inside this package in a class diagram. In real-world scenarios, such conversion could be the responsibility of another microservice; this way Camel would handle only the integration part.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png"&gt;&lt;img class=" size-full wp-image-515547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png" alt="" width="731" height="665" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package.png 731w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/nlg-package-300x273.png 300w" sizes="(max-width: 731px) 100vw, 731px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ContentFactory&lt;/code&gt; delegates the summary generation to the &lt;code&gt;IntroTemplate&lt;/code&gt; class, which will create the first paragraph of our news. For demo purposes, it’s a one-sentence only paragraph. You could easily add more content by creating more template classes inside this package, for example, a “best player match” paragraph describing how well a player performed along the match.&lt;/p&gt; &lt;p&gt;If we took a hypothetical match were Germany beats Brazil by the score of 7&amp;#215;1, this engine would generate something like:&lt;/p&gt; &lt;p&gt;&lt;i&gt;On July 8th, Germany visited Brazil to bring home an outstanding victory by the score of 1&amp;#215;7.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;Having generated the match summary, the route outputs it in the form of a domain model called &lt;code&gt;StatisticsSummary&lt;/code&gt;. This domain model contains data about the match summary, the date, and the teams’ names. This structure will be the input to the last route, which will convert this statistics domain into a WordPress post and publish it to our blog.&lt;/p&gt; &lt;p&gt;Finally, we get to the route Send to WordPress. This route will delegate the publication of the post to the Camel WordPress component, having converted the match summary into a WordPress post using the &lt;a href="http://camel.apache.org/type-converter.html"&gt;Camel type converter&lt;/a&gt; feature:&lt;/p&gt; &lt;pre&gt;from("direct:post-news-summary") .routeId("post-news-summary") .convertBodyTo(Post.class) .to("wordpress:post");&lt;/pre&gt; &lt;p&gt;To use the Camel type converter feature, just add the file &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/src/main/resources/META-INF/services/org/apache/camel/TypeConverter"&gt;TypeConverter&lt;/a&gt; inside the path &lt;code&gt;services/org/apache/camel&lt;/code&gt; with the fully qualified name of the converter class. Let’s take a look at this class:&lt;/p&gt; &lt;pre&gt;@Converter public final class StatisticsToPostConverter { private static final int DEFAULT_AUTHOR_ID = 1; private static final Logger LOGGER = LoggerFactory.getLogger(StatisticsToPostConverter.class); @Converter public static Post toPost(StatisticsSummary statisticsSummary, Exchange exchange) { final Post post = new Post(); final Content postContent = new Content(statisticsSummary.getSummary()); postContent.setRaw(statisticsSummary.getSummary()); final Content titleContent = new Content(String.format("%s X %s Results", statisticsSummary.getFixture().getHomeTeamName(), statisticsSummary.getFixture().getAwayTeamName())); titleContent.setRaw(titleContent.getRendered()); post.setContent(postContent); post.setFormat(Format.standard); post.setStatus(PublishableStatus.publish); post.setTitle(titleContent); post.setAuthor(DEFAULT_AUTHOR_ID); LOGGER.debug("Converted StatisticsSummary {} to Post {}", statisticsSummary, post); return post; } }&lt;/pre&gt; &lt;p&gt;The responsibility of this converter is to create a new &lt;code&gt;Post&lt;/code&gt; object and populate it according to WordPress rules for a new, published post.&lt;/p&gt; &lt;p&gt;The first lines just set the raw content and format of the post. The post&amp;#8217;s publication status also could be set to &lt;strong&gt;draft&lt;/strong&gt; or &lt;strong&gt;private&lt;/strong&gt;. Draft status will save the post in the WordPress database for later intervention. In the private status, the post will be visible only to administrators. Check for other statuses &lt;a href="https://codex.wordpress.org/Post_Status"&gt;in the WordPress documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The author ID is another important property while creating a new post. If you are not sure, it could be fetched using the author operation by the Camel WordPress plugin or by looking into the WordPress user’s dashboard.&lt;/p&gt; &lt;p&gt;Another important thing to check is the WordPress configuration and connectivity. For the Camel WordPress plugin to work, the plugin &lt;a href="https://github.com/WP-API/Basic-Auth"&gt;Basic Authentication must be installed&lt;/a&gt;. This way, Camel can use HTTP Basic authentication to connect to WordPress and perform write operations.&lt;/p&gt; &lt;p&gt;Future versions of Camel WordPress &lt;a href="https://issues.apache.org/jira/browse/CAMEL-12201"&gt;will use token-based authentication&lt;/a&gt;, which is a more secure and reliable method than HTTP Basic in non-TLS connections. It’s worth noting that you should never use plain HTTP connections to authenticate via HTTP Basic, because credentials are passed in base64 encoded strings and an attacker could easily steal those credentials.&lt;/p&gt; &lt;h2&gt;Camel WordPress configuration&lt;/h2&gt; &lt;p&gt;To get Camel WordPress working, some configuration is needed. This configuration could be done in the &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/src/main/java/sample/camel/wordpress/ExampleCamelWordpressRoute.java"&gt;route definition&lt;/a&gt;. There, we’re passing the WordPress URL and user credentials that are able to create new posts:&lt;/p&gt; &lt;pre&gt;final WordPressComponentConfiguration configuration = new WordPressComponentConfiguration(); final WordPressComponent component = new WordPressComponent(); configuration.setUrl(config.getWordpressUrl()); configuration.setPassword(config.getWordpressPassword()); configuration.setUser(config.getWordpressUser()); component.setConfiguration(configuration); getContext().addComponent("wordpress", component);&lt;/pre&gt; &lt;p&gt;All these configurations were externalized using Spring Boot properties injected later into the Camel Context:&lt;/p&gt; &lt;pre&gt;camel.springboot.name=CamelSampleWordpress camel.component.servlet.mapping.context-path=/api/* logging.level.org.apache.http=DEBUG logging.level.org.apache.http.wire=ERROR logging.level.org.restlet=DEBUG logging.level.org.apache.camel=DEBUG football.api.fixture.path=v1/fixtures/{fixtureId} football.api.host=https://api.football-data.org football.api.token=${FOOTBALL_API_TOKEN:&amp;#60;your_api_token&amp;#62;} wordpress.url=${WORDPRESS_URL:http://localhost/wp-json/} wordpress.user=${WORDPRESS_USER:user} wordpress.password=${WORDPRESS_PASS:pass}&lt;/pre&gt; &lt;p&gt;These properties were set in the &lt;code&gt;application.properties&lt;/code&gt; file that later will be available in the class &lt;code&gt;ExampleCamelWordpressRouteConfig&lt;/code&gt; to be used across the routes.&lt;/p&gt; &lt;h2&gt;Running the demo&lt;/h2&gt; &lt;p&gt;To get the demo running &lt;a href="https://github.com/ricardozanini/camel-example-wordpress/blob/master/openshift/camel-wordpress-sample-template.yaml"&gt;we have a Red Hat OpenShift template&lt;/a&gt; that creates a WordPress blog backed by a MySQL database and this Camel demo microservice. Visit the “summary” endpoint to see the NLG engine working:&lt;/p&gt; &lt;pre&gt;curl http://&amp;#60;camel-wp-example-host&amp;#62;/api/match/158186/summary {"fixture":{"date":"2017-05-14T19:00:00.000+0000", "status":"FINISHED" (...)&lt;/pre&gt; &lt;p&gt;To send this summary to the WordPress blog, make a simple GET request to the “send” endpoint:&lt;/p&gt; &lt;pre&gt;curl http://&amp;#60;camel-wp-example-host&amp;#62;/api/match/158186/send {"id":6,"author":1,"date":"2018-08-20T18:05:37.000+0000", "modified":"2018-08-20T18:05:37.000+0000", "slug":"avai-sc-x-ec-vitoria-results-2" (...)&lt;/pre&gt; &lt;p&gt;For the sake of simplicity in this demo, we used the GET verb, but in real-world scenarios it would be preferable to use the POST verb to create new content.&lt;/p&gt; &lt;p&gt;Finally, we should see our news published to the WordPress front page:&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-515567 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png" alt="" width="905" height="493" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot.png 905w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/08/wordpress-screenshot-768x418.png 768w" sizes="(max-width: 905px) 100vw, 905px" /&gt;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, we&amp;#8217;ve seen how to use Apache Camel to auto-generate news posts with NLG and publish them to a WordPress blog via a soccer public API that retrieves statistics. The Camel WordPress component behaves like the Facebook, Twitter, and others components that integrate with social media to generate new content. Besides creating posts, the component also has author operations that could be used to integrate users&amp;#8217; data across databases.&lt;/p&gt; &lt;p&gt;I hope this example can help you write new integrations and use cases using WordPress. &lt;a href="https://github.com/ricardozanini/camel-example-wordpress"&gt;The full source code is hosted on GitHub&lt;/a&gt; (contributions are welcome!). Stay tuned because we are planning to add many more operations to the Camel WordPress component.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;linkname=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F27%2Fcamel-wordpress-integration%2F&amp;#38;title=Auto-generating%20news%20and%20publishing%20it%20to%20WordPress%20with%20Apache%20Camel" data-a2a-url="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/" data-a2a-title="Auto-generating news and publishing it to WordPress with Apache Camel"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/"&gt;Auto-generating news and publishing it to WordPress with Apache Camel&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/83OBURWkISo" height="1" width="1" alt=""/&gt;</content><summary>With the release of Apache Camel 2.21, some new components were added to the project and Camel WordPress was one of them. Camel is one of the upstream community projects for Red Hat Fuse. In this article, we will see how to use this new component to publish an auto-generated news post based on a soccer statistics API. The example consumes the statistics API, generates the text based on a Natural L...</summary><dc:creator>Ricardo Zanini</dc:creator><dc:date>2018-08-27T11:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/</feedburner:origLink></entry><entry><title>Infinispan 9.4.0.CR1 is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/IbiJ3suvj7s/infinispan-940cr1-is-out.html" /><category term="9.4" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="release candidate" scheme="searchisko:content:tags" /><author><name>Katia Aresti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_4_0_cr1_is_out</id><updated>2018-08-30T13:28:23Z</updated><published>2018-08-27T08:34:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Dear Infinispan users,&lt;br /&gt;&lt;br /&gt;We have just released &lt;b&gt;9.4.0.CR1&lt;/b&gt; which includes bug fixes and improvements.&lt;br /&gt;&lt;br /&gt;Highlights of this release include:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Near cache and client side TTL (&lt;a href="https://issues.jboss.org/browse/ISPN-9098"&gt;ISPN-9098&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Allow configuring near cache from hot rod properties (&lt;a href="https://issues.jboss.org/browse/ISPN-9385"&gt;ISPN-9385&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Initial support for JSON format in scripts&amp;nbsp;&lt;/li&gt;&lt;li&gt;Default analyzers are provided to use with remote queries (&lt;a href="https://issues.jboss.org/browse/ISPN-9429"&gt;ISPN-9429&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Prevent user from configuring passivation with a shared store (&lt;a href="https://issues.jboss.org/browse/ISPN-7168"&gt;ISPN-7168&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Enhance RemoteStore to support segmentation (&lt;a href="https://issues.jboss.org/browse/ISPN-9376"&gt;ISPN-9376&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Upgrade to RxJava 2.2.0 (&lt;a href="https://issues.jboss.org/browse/ISPN-9418" target="_blank"&gt;ISPN-9418&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;li&gt;Hot Rod configuration properties have setters now to ease integration with other frameworks (&lt;a href="https://issues.jboss.org/browse/ISPN-9398"&gt;ISPN-9398&lt;/a&gt;)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;The full list of 9.4.0.CR1 fixes are &lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12337826"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You can find the release on our &lt;a href="http://infinispan.org/download/"&gt;download page&lt;/a&gt;. Please report any issues in our &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;br /&gt;Enjoy,&lt;br /&gt;&lt;br /&gt;The Infinispan Team&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/0Xp0I-lguCg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/IbiJ3suvj7s" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan users, We have just released 9.4.0.CR1 which includes bug fixes and improvements. Highlights of this release include: Near cache and client side TTL (ISPN-9098)  Allow configuring near cache from hot rod properties (ISPN-9385)  Initial support for JSON format in scripts  Default analyzers are provided to use with remote queries (ISPN-9429)  Prevent user from configuring passivation...</summary><dc:creator>Katia Aresti</dc:creator><dc:date>2018-08-27T08:34:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/0Xp0I-lguCg/infinispan-940cr1-is-out.html</feedburner:origLink></entry><entry><title>Red Hat Partner Community Meetup in the Netherlands</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xkeTIvcVcuI/red-hat-partner-community-meetup-netherlands.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_partner_community_meetup_in_the_netherlands</id><updated>2018-08-27T08:29:49Z</updated><published>2018-08-27T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/partners" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat partner community" border="0" data-original-height="384" data-original-width="1600" height="76" src="https://2.bp.blogspot.com/-76aI-0337V8/W4O0woHJV6I/AAAAAAAAtBU/sqwIMumGlfQejfbW40QuTNw9gu7QIl5UACLcBGAs/s320/connect.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;While most of what I talk about here is related to open source technologies that reside in the solution portfolio of Red Hat, I'd like to think it's because working with good technology is why you read this content.&lt;br /&gt;&lt;br /&gt;This article is a bit of a plug for something directly related to the business of working with Red Hat technologies and customers. It's about partnering with Red Hat as an organization to further expand your reach and provide your developers / consultants / architects with the chance to work with all of these open source technologies.&lt;br /&gt;&lt;br /&gt;Last week, I was invited to present for the Red Hat Partner Community Meetup in the Netherlands. This is a very unique group of companies known as &lt;a href="https://www.redhat.com/en/global/netherlands#links" target="_blank"&gt;Premier Partners&lt;/a&gt; that can deliver IT services for customers using open source technologies supported by Red Hat.&lt;br /&gt;&lt;br /&gt;My talk was about giving these partners a preview on the application development product portfolio, such as what is coming, timelines and what's driving future direction in the products. Here's a peek at the lead slide, as unless you were in attendance, that's all you're going to get.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.redhat.com/en/partners" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat partner community" border="0" data-original-height="893" data-original-width="1600" height="222" src="https://2.bp.blogspot.com/-dwrbx6RuCZM/W4O0jQjrNMI/AAAAAAAAtBQ/Qw_wlCXRP5o0rbgqRN4aAq4BU8_Zth5PgCLcBGAs/s400/partner-community.png" title="" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The question you might be asking yourself is, "How can I get in on sessions like this?"&lt;br /&gt;&lt;br /&gt;That's not as hard as you think, but it does &lt;a href="https://www.redhat.com/en/partners" target="_blank"&gt;involve you getting in touch&lt;/a&gt; about the depth of collaboration with Red Hat, how to get your companies services mentioned, and how to accelerate your open source solutions.&lt;br /&gt;&lt;br /&gt;Hope to welcome you and your teams soon as &lt;a href="https://www.redhat.com/en/partners" target="_blank"&gt;Red Hat Partners&lt;/a&gt;!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ei63EnBqXkY:_d0RkQsn6Do:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ei63EnBqXkY:_d0RkQsn6Do:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ei63EnBqXkY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xkeTIvcVcuI" height="1" width="1" alt=""/&gt;</content><summary>While most of what I talk about here is related to open source technologies that reside in the solution portfolio of Red Hat, I'd like to think it's because working with good technology is why you read this content. This article is a bit of a plug for something directly related to the business of working with Red Hat technologies and customers. It's about partnering with Red Hat as an organization...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-08-27T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ei63EnBqXkY/red-hat-partner-community-meetup-netherlands.html</feedburner:origLink></entry><entry><title>Hibernate ORM 5.1.16.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KgLGs6PokqM/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Gail Badner</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_1_16_final_released</id><updated>2018-08-30T22:12:05Z</updated><published>2018-08-26T00:00:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;Hibernate ORM 5.1.16.Final:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;tag is &lt;a href="http://github.com/hibernate/hibernate-orm/releases/tag/5.1.16"&gt;here&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;changes are listed &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31689"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10031&amp;amp;version=31689"&gt;here&lt;/a&gt;);&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;release bundles are at &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/5.1.16.Final/"&gt;SourceForge&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For information on consuming the release via your favorite dependency-management-capable build tool, see &lt;a href="http://hibernate.org/orm/releases/5.1" class="bare"&gt;http://hibernate.org/orm/releases/5.1&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KgLGs6PokqM" height="1" width="1" alt=""/&gt;</content><summary>Hibernate ORM 5.1.16.Final: tag is here; changes are listed here (or, for people without a Hibernate Jira account, here); release bundles are at SourceForge. For information on consuming the release via your favorite dependency-management-capable build tool, see http://hibernate.org/orm/releases/5.1</summary><dc:creator>Gail Badner</dc:creator><dc:date>2018-08-26T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/08/26/hibernate-orm-5116-final-release/</feedburner:origLink></entry><entry><title>Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2YuOheLyDFs/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="SmallRye" scheme="searchisko:content:tags" /><category term="thorntail" scheme="searchisko:content:tags" /><category term="wildfly swarm" scheme="searchisko:content:tags" /><author><name>Antoine Sabot-Durand</name></author><id>searchisko:content:id:jbossorg_blog-eclipse_microprofile_and_red_hat_update_thorntail_and_smallrye</id><updated>2018-08-23T08:04:42Z</updated><published>2018-08-23T08:04:42Z</published><content type="html">&lt;p&gt;During the last three months, there have been some changes regarding Eclipse MicroProfile at Red Hat. If you haven&amp;#8217;t been following the details, this post recaps what&amp;#8217;s changed and introduces Thorntail and SmallRye.&lt;/p&gt; &lt;h2&gt;Bye-bye WildFly Swarm! Hello Thorntail!&lt;/h2&gt; &lt;p&gt;You may have missed this important news. Our MicroProfile implementation changed its name two months ago.&lt;/p&gt; &lt;p&gt;After a lot of feedback from the community, we decided to rename “WildFly Swarm” to Thorntail. While the former name was nice, we found that the “Swarm” term was a bit overloaded in the IT industry and could be confusing. It’s the same for the “WildFly” part; sharing this name with our Java EE application server was a source of confusion for some users, making them think it was a subproject of WildFly.&lt;/p&gt; &lt;p&gt;&lt;span id="more-515407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;With the name, we also changed versioning to come back to a more semantic version numbering. Thus the last release version of WildFly Swarm was &lt;a href="http://wildfly-swarm.io/posts/announcing-wildfly-swarm-2018-5-0/"&gt;2018.5.0&lt;/a&gt; and the first version of Thorntail (same code, different name) was &lt;a href="http://wildfly-swarm.io/posts/announcing-thorntail-2-0-0-final/"&gt;2.0.0.Final&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Changing the version numbering makes it easier for us to communicate about new features and have better links to downstream project versions.&lt;/p&gt; &lt;p&gt;You’ll find more information on the project renaming and versioning changes in &lt;a href="https://www.infoq.com/news/2018/05/wildfly-thorntail"&gt;this interview&lt;/a&gt; that Bob McWhirter gave to InfoQ.&lt;/p&gt; &lt;p&gt;As it’s still the same project, renaming has no technical impact on existing projects, but you need to change Maven artifacts &lt;code&gt;groupid&lt;/code&gt; and &lt;code&gt;artifactid&lt;/code&gt; and some plugins name to stick to the new version. All the migration details are listed in the &lt;a href="http://wildfly-swarm.io/posts/announcing-thorntail-2-0-0-final/"&gt;Thorntail 2.0.0.final release notes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You’ll find everything you need to know about using or contributing to Thorntail at &lt;a href="http://thorntail.io"&gt;thorntail.io&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Here comes SmallRye, a shared MicroProfile implementation&lt;/h2&gt; &lt;p&gt;A few months ago, Ken Finnigan launched a discussion on the MicroProfile mailing list to start an initiative around MicroProfile implementations.&lt;/p&gt; &lt;p&gt;MicroProfile is a fast-moving target and has evolved a lot since it was announced two years ago. Keeping track of this fast evolution in specifications and the matching implementations requires a lot of energy for all vendors, so Ken proposed to put the common parts of these implementation efforts into a single vendor-neutral implementation of MicroProfile, whose project name is SmallRye.&lt;/p&gt; &lt;p&gt;At &lt;a href="https://www.smallrye.io/"&gt;smallrye.io&lt;/a&gt; you can see that this community-driven project is doing well: all MicroProfile specifications now have their own implementation.&lt;/p&gt; &lt;p&gt;Source code can be checked at the &lt;a href="https://github.com/smallrye"&gt;SmallRye GitHub&lt;/a&gt; repository.&lt;/p&gt; &lt;p&gt;Thorntail, in its 2.1.0.Final version, is the first MicroProfile container to use the SmallRye implementation.&lt;/p&gt; &lt;p&gt;So now, in addition to contributing to all MicroProfile specifications, you can also contribute to an implementation that will benefit the entire community, thanks to SmallRye.&lt;/p&gt; &lt;h2&gt;What’s next?&lt;/h2&gt; &lt;p&gt;The Thorntail team is working on a lot of nice stuff for the future for the MicroProfile community and Red Hat customers.&lt;/p&gt; &lt;p&gt;For instance, the upcoming Thorntail version will start using Java EE 8 specifications like CDI 2.0 or JAX-RS 2.1 and SmallRye will support MicroProfile 1.4 in its next version.&lt;/p&gt; &lt;p&gt;If you want to stay up to date you can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Follow us on &lt;a href="https://twitter.com/thorntail_io"&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Check our &lt;a href="https://groups.google.com/forum/#!forum/thorntail"&gt;Google group&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Chat with the other community members on IRC: #Thorntail channel on freenode.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See you around!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;linkname=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F08%2F23%2Feclipse-microprofile-and-red-hat-update-thorntail-and-smallrye%2F&amp;#38;title=Eclipse%20MicroProfile%20and%20Red%20Hat%20Update%3A%20Thorntail%20and%20SmallRye" data-a2a-url="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/" data-a2a-title="Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/"&gt;Eclipse MicroProfile and Red Hat Update: Thorntail and SmallRye&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2YuOheLyDFs" height="1" width="1" alt=""/&gt;</content><summary>During the last three months, there have been some changes regarding Eclipse MicroProfile at Red Hat. If you haven’t been following the details, this post recaps what’s changed and introduces Thorntail and SmallRye. Bye-bye WildFly Swarm! Hello Thorntail! You may have missed this important news. Our MicroProfile implementation changed its name two months ago. After a lot of feedback from the commu...</summary><dc:creator>Antoine Sabot-Durand</dc:creator><dc:date>2018-08-23T08:04:42Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/08/23/eclipse-microprofile-and-red-hat-update-thorntail-and-smallrye/</feedburner:origLink></entry></feed>
